@model List<CoinFill.ViewModels.CryptocurrencyTvlViewModel>
@using CoinFill.Helpers
@using CoinFill.Helpers.Extensions
@{
    ViewData.SetTitle("Your stakes");
    ViewData.SetMetaDescription("Manage every cryptocurrency that you are staking with each validator.");
    Layout = "~/Views/Shared/_Layout.cshtml";
}

@section StyleSheets {
    <style>
        .btn-group-vertical > .btn:not(:first-child),
        .btn-group-vertical > .btn:not(:last-child):not(.dropdown-toggle) {
            border-top-left-radius: 0.4rem !important;
            border-top-right-radius: 0.4rem !important;
            border-bottom-left-radius: 0.4rem !important;
            border-bottom-right-radius: 0.4rem !important;
        }
    </style>
    <link rel="stylesheet" href="~/sweet-alert2/sweetalert2.min.css" />
}

@await Html.PartialAsync("~/Views/Shared/Widgets/_NavCard.cshtml",
    new CoinFill.WidgetViewModels.NavCardWidgetViewModel(
        "fas fa-layer-group",
        "text-primary",
        ViewData.GetTitle(),
        ViewData.GetMetaDescription(),
        "col-12"))

<div class="row">
    @foreach (var cryptocurrency in Model)
    {
        <div class="col-12 mb-3" style="user-select: none;">
            <div class="card card-span">
                <div class="card-body">
                    <div class="d-flex align-items-center">
                        <div class="avatar avatar-3xl text-center p-2 rounded-soft mr-3"
                             data-toggle="set-color-and-background-color"
                             data-color="@cryptocurrency.CryptocurrencyColor"
                             style="width:3.7rem!important;height:3.7rem!important;">
                            <img src="~/images/static/cryptocurrencies/@cryptocurrency.CryptocurrencyIcon"
                                 class="rounded-circle p-0 border-0 d-inline-block"
                                 loading="lazy"
                                 alt="@cryptocurrency.CryptocurrencyName"
                                 style="min-width: 2.5rem !important; min-height: 2.5rem !important;" />
                        </div>
                        <span class="font-weight-semi-bold text-black">
                            <span>@cryptocurrency.CryptocurrencyName</span>
                            <br />
                            <span class="font-weight-medium text-secondary fs--1">Staking: @cryptocurrency.MyTvl</span>
                        </span>
                        <span class="badge badge-soft-primary ml-auto fs-0 fs-md-1">
                            @cryptocurrency.MaxApy% APY
                        </span>
                        <div class="ml-auto btn-group-vertical">
                            <a asp-controller="Staking"
                               asp-action="Index"
                               data-stake="@cryptocurrency.CryptocurrencyId"
                               onclick="sessionStorage.setItem('choosenstake', '@cryptocurrency.CryptocurrencyId')"
                               class="btn btn-primary btn-sm d-block mb-2">
                                Stake
                            </a>
                            <button data-unstake="@cryptocurrency.CryptocurrencyId" class="btn btn-outline-danger btn-sm">
                                <span>Unstake</span>
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    }
</div>

@section Scripts {
    <script>
        $(document).ready(function () {
            $(document).ready(function () {
                $('main[role="main"]').removeClass('pb-3');
            })

            let btnStake = $('a[data-stake]');;
            let btnUnstake = $('button[data-unstake]');

            btnUnstake.click(function () {
                let targetButton = $(this);
                let targetButtonText = targetButton.find('span');
                const targetButtonTextUnchanged = targetButtonText.html();
                const cryptocurrencyId = targetButton.attr('data-unstake');

                btnStake.addClass('disabled');
                btnUnstake.prop('disabled', true);

                const width = targetButton.width();
                const height = targetButton.height();
                targetButtonText.fadeOut('fast', function () {
                    $(this).html('<div class="spinner mx-auto" style="border: 1px solid var(--primary); border-top-color: white;"></div>').fadeIn('slow');
                    targetButton.width(width);
                    targetButton.height(height);
                });

                setTimeout(function () {
                    $.ajax({
                        url: '@Url.Action("Unstake", "Staking", new { Area = "" })',
                        type: 'POST',
                        data: { coinId: cryptocurrencyId },
                        dataType: 'json',
                        headers: {
                            'RequestVerificationToken': $("input[name='__RequestVerificationToken']").val()
                        },
                        success: function (response) {
                            if (response.success === true && response.noCryptoToUnstake) {
                                targetButtonText.fadeOut('fast', function () {
                                    $(this).html('<i class="text-danger fas fa-times no-tick"></i>').fadeIn('slow', function () {
                                        setTimeout(function () {
                                            btnStake.removeClass('disabled');
                                            btnUnstake.prop('disabled', false);

                                            Swal.mixin({
                                                customClass: {
                                                    confirmButton: "btn btn-sm btn-info mr-2",
                                                    cancelButton: "btn btn-sm btn-falcon-secondary"
                                                },
                                                buttonsStyling: false
                                            }).fire({
                                                title: response.title,
                                                text: response.body,
                                                icon: response.severity,
                                                showCancelButton: true,
                                                confirmButtonText: response.btnStakeText,
                                                cancelButtonText: "Later"
                                            }).then((result) => {
                                                if (result.isConfirmed) {
                                                    sessionStorage.setItem('choosenstake', response.cryptocurrencyId)
                                                    window.location.href = response.redirectToStake
                                                }
                                            });

                                            targetButtonText.fadeOut('fast', function () {
                                                $(this).html(targetButtonTextUnchanged).fadeIn('slow');
                                            })
                                        }, 600)
                                    })
                                })
                            } else {
                                if (response.redirectUrl) window.location.href = response.redirectUrl;
                                else {
                                    targetButtonText.fadeOut('fast', function () {
                                        $(this).html('<i class="text-danger fas fa-times no-tick"></i>').fadeIn('slow');
                                        HandleError(response.title, response.body, response.severity);
                                    })
                                        .promise()
                                        .done(function () {
                                            setTimeout(function () {
                                                targetButtonText.fadeOut('fast', function () {
                                                    $(this).html(targetButtonTextUnchanged).fadeIn('slow');
                                                    btnStake.removeClass('disabled');
                                                    btnUnstake.prop('disabled', false);
                                                });
                                            }, 1300)
                                        })
                                    
                                }
                            }
                        },
                        error: function () {
                            targetButtonText.fadeOut('fast', function () {
                                $(this).html('<i class="text-danger fas fa-times no-tick"></i>').fadeIn('slow');
                                HandleError('An error occurred', 'Please refresh the page and try again or contact the customer support.', 'error');
                            })
                                .promise()
                                .done(function () {
                                    setTimeout(function () {
                                        targetButtonText.fadeOut('fast', function () {
                                            $(this).html(targetButtonTextUnchanged).fadeIn('slow');
                                            btnStake.removeClass('disabled');
                                            btnUnstake.prop('disabled', false);
                                        });
                                    }, 1300)
                                })
                        }
                    });
                }, 1200)
            })

            function HandleError(title, body, severity) {
                toastr[severity](body, title);
            }
        })
    </script>
    <script async src="~/sweet-alert2/sweetalert2.all.min.js"></script>
}

